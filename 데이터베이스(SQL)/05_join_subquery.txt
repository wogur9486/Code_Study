조인 (JOIN)
	두 개 이상의 테이블을 결합하여 데이터를 조회하는 방법
	조인을 사용하면 여러 테이블의 데이터를 한 번에 조회할 수 있음
	조인의 기본적인 종류
		INNER JOIN: 
			두 테이블에서 일치하는 행만 반환
			일반적으로 많이 사용
		LEFT JOIN: 
			왼쪽 테이블의 모든 행과 오른쪽 테이블에서 일치하는 행을 반환
			일치하지 않는 오른쪽 테이블의 값은 NULL로 채움
		RIGHT JOIN:
			 오른쪽 테이블의 모든 행과 왼쪽 테이블에서 일치하는 행을 반환
			일치하지 않는 왼쪽 테이블의 값은 NULL로 채움
		FULL JOIN: 
			두 테이블에서 일치하는 모든 행을 반환하며, 일치하지 않는 행은 NULL로 채움
			MySQL에서는 직접 지원하지 않지만, UNION을 사용하여 구현 가능

-- 학생의 이름과 각 과목의 점수 조회
SELECT 
    s.student_name, 
    sub.subject_name, 
    sc.score
FROM 
    scores sc
JOIN 
    students s ON sc.student_id = s.student_id
JOIN 
    subjects sub ON sc.subject_id = sub.subject_id;

-- 특정 학생의 모든 과목 점수 조회 (예: 홍길동)
SELECT 
    s.student_name, 
    sub.subject_name, 
    sc.score
FROM 
    scores sc
JOIN 
    students s ON sc.student_id = s.student_id
JOIN 
    subjects sub ON sc.subject_id = sub.subject_id
WHERE 
    s.student_name = '홍길동';

-- 특정 과목을 수강한 모든 학생의 점수 조회 (예: 수학)
SELECT 
    s.student_name, 
    sub.subject_name, 
    sc.score
FROM 
    scores sc
JOIN 
    students s ON sc.student_id = s.student_id
JOIN 
    subjects sub ON sc.subject_id = sub.subject_id
WHERE 
    sub.subject_name = '수학';

-- 학생별 평균 점수 조회
SELECT 
    s.student_name, 
    AVG(sc.score) AS average_score
FROM 
    scores sc
JOIN 
    students s ON sc.student_id = s.student_id
GROUP BY 
    s.student_name;

-- 과목별 평균 점수 조회
SELECT 
    sub.subject_name, 
    AVG(sc.score) AS average_score
FROM 
    scores sc
JOIN 
    subjects sub ON sc.subject_id = sub.subject_id
GROUP BY 
    sub.subject_name;


서브쿼리 (Subquery)
	쿼리 내에 포함된 또 다른 쿼리
	SELECT, INSERT, UPDATE, DELETE 문에서 사용될 수 있으며, 주로 복잡한 조건을 처리하거나 특정 값을 검색하는 데 사용

-- 특정 학생의 모든 과목 점수 조회 (학생 이름으로 조회)
SELECT subject_name, score
FROM scores
JOIN subjects ON scores.subject_id = subjects.subject_id
WHERE student_id = (SELECT student_id FROM students WHERE student_name = '홍길동');

-- 학생별 평균 점수 조회 (평균 점수가 90 이상인 학생만)
SELECT student_name, avg_score
FROM (
    SELECT student_id, AVG(score) AS avg_score
    FROM scores
    GROUP BY student_id
) AS avg_scores
JOIN students ON avg_scores.student_id = students.student_id
WHERE avg_score >= 90;

-- 특정 과목의 최고 점수를 받은 학생 조회 (과목 이름으로 조회)
SELECT student_name, score
FROM students
JOIN scores ON students.student_id = scores.student_id
WHERE score = (
    SELECT MAX(score)
    FROM scores
    JOIN subjects ON scores.subject_id = subjects.subject_id
    WHERE subject_name = '수학'
);

-- 특정 과목의 평균 점수보다 낮은 점수를 받은 학생 조회
SELECT student_name, subject_name, score
FROM students
JOIN scores ON students.student_id = scores.student_id
JOIN subjects ON scores.subject_id = subjects.subject_id
WHERE score < (
    SELECT AVG(score)
    FROM scores
    WHERE subject_id = (SELECT subject_id FROM subjects WHERE subject_name = '과학')
);

-- 자기소개가 포함된 학생 중 특정 과목을 수강한 학생 조회
SELECT s.student_name, sub.subject_name
FROM students s
JOIN scores sc ON s.student_id = sc.student_id
JOIN subjects sub ON sc.subject_id = sub.subject_id
WHERE s.student_id IN (
    SELECT student_id
    FROM students
    WHERE intro IS NOT NULL
) AND sub.subject_name = '수학';

조인과 서브쿼리의 차이
조인
	여러 테이블을 결합하여 데이터를 동시에 조회
	조인을 사용하면 여러 테이블 간의 관계를 명확히 보여줄 수 있음
서브쿼리
	쿼리 내에 또 다른 쿼리를 포함하여 복잡한 조건을 처리하거나 특정 값을 검색
	서브쿼리는 한 번에 한 테이블에만 집중하여 데이터를 처리할 수 있음

