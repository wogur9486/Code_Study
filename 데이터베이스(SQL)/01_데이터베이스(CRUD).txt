show databases;

CREATE DATABASE mydb;

SELECT DATABASE();

CREATE TABLE students (
  student_id INT AUTO_INCREMENT PRIMARY KEY,
  student_name VARCHAR(100) NOT NULL,
  birth_date DATE,
  gender ENUM('Male', 'Female') NOT NULL
);

DESC students;

DROP TABLE students;

ALTER TABLE students CHANGE birth_date birth DATE;
ALTER TABLE students CHANGE gender gender ENUM('남', '여') NOT NULL;
ALTER TABLE students ADD COLUMN intro TEXT;

수정된 테이블
CREATE TABLE students (
  student_id INT AUTO_INCREMENT PRIMARY KEY,
  student_name VARCHAR(100) NOT NULL,
  birth DATE,
  gender ENUM('남', '여') NOT NULL,
  intro TEXT
);

-- DML(INSERT, SELECT, UPDATE, DELETE)
-- 데이터 삽입
INSERT INTO students (student_name, birth, gender, intro)
	VALUES ('홍길동', '2000-05-10', '남', '안녕, 나는 홍길동. 모험을 좋아');

-- PK 제약조건 위배(중복)
-- INSERT INTO students (student_id, student_name, birth, gender, intro)
--	VALUES (1, '홍길동', '2000-05-10', '남', '안녕, 나는 홍길동. 모험을 좋아');

-- 컬럼 순서 조절 가능
INSERT INTO students (student_name, gender, intro, birth) 
VALUES ('신사임당', '여', '안녕하세요, 신사임당입니다. 예술을 사랑합니다.', '1999-12-15');

-- 모든 컬럼 데이터 삽입 시 컬럼명 생략 가능
INSERT INTO students VALUES (100, '장보고', '1996-06-29', '남', '안녕하세요, 장보고입니다. 바다를 사랑합니다.');
INSERT INTO students VALUES (DEFAULT, '장보고', '1996-06-29', '남', '안녕하세요, 장보고입니다. 바다를 사랑합니다.');

-- 부분 삽입
INSERT INTO students (student_name, birth, gender) 
VALUES ('임꺽정', '1998-11-21', '남');

-- 여러 데이터 삽입
INSERT INTO students (student_name, birth, gender, intro) 
VALUES 
    ('강감찬', '2001-03-22', '남', '안녕하세요, 강감찬입니다. 전략가입니다.'),
    ('유관순', '2000-07-11', '여', '안녕하세요, 유관순입니다. 자유를 위해 싸웁니다.');

-- 전체 조회
SELECT * FROM students;

-- 특정 열만 조회 (예: 이름과 생일)
SELECT student_name, birth FROM students;

-- 특정 이름을 가진 학생 조회 (예: '홍길동')
SELECT * FROM students WHERE student_name = '홍길동';

-- 조건에 맞는 학생 조회 (예: 남학생만)
SELECT * FROM students WHERE gender = '남';

-- 조건에 맞는 학생 조회 (예: 2000년 이후에 태어난 학생)
SELECT * FROM students WHERE birth >= '2000-01-01';

-- 특정 생일 범위 내의 학생 정보 조회 (예: 2000년 이후에 태어난 학생의 이름과 생일)
SELECT student_name, birth FROM students WHERE birth >= '2000-01-01';

-- 특정 패턴이 포함된 자기소개를 가진 학생 조회 (예: "안녕하세요"를 포함한 소개)
SELECT * FROM students WHERE intro LIKE '%사랑%';

-- 학생 이름 오름차순 정렬
SELECT * FROM students ORDER BY student_name ASC;

-- 생일을 기준으로 학생 정보 내림차순 정렬
SELECT * FROM students ORDER BY birth DESC;

-- 성별이 '남'이 아닌 학생
SELECT * FROM students WHERE NOT gender = '남';

-- 성별이 '여'이거나 2000년 이후에 태어나지 않은 학생
SELECT * FROM students WHERE NOT gender = '남' AND birth >= '2000-01-01';


-- 성별이 '님'이고 2000년 이후에 태어난 학생이거나 성별이 '여'이면서 1999년 이후에 태어난 학생
SELECT * FROM students 
WHERE (gender = '남' AND birth >= '2000-01-01') 
   OR (gender = '여' AND birth >= '1999-01-01');

-- 성별이 '남'이고 1999년 이후에 태어난 학생이거나 성별이 '여'이면서 2001년 이전에 태어난 학생
SELECT * FROM students 
WHERE (gender = '남' AND birth >= '1999-01-01') 
   OR (gender = '여' AND birth < '2001-01-01');

-- 특정 열을 NULL로 조회 (예: intro가 NULL인 학생 조회)
SELECT * FROM students WHERE intro IS NULL;

-- 집계함수 활용(COUNT, SUM, AVG, MIN, MAX 등) 일반적으로 그룹화를 함께 활용한다.

-- 학생 수 세기(COUNT)
SELECT COUNT(*) AS total_students FROM students;

-- 특정 성별의 학생 수 세기
SELECT gender, COUNT(*) AS count FROM students GROUP BY gender;

-- 평균 나이
SELECT AVG(YEAR(CURDATE()) - YEAR(birth)) AS avg_age FROM students;

-- 가장 나이가 많은
SELECT MIN(birth) AS oldest_birth FROM students;

-- 가장 나이가 적은
SELECT MAX(birth) AS latest_birth FROM students;

-- 성별에 따른 평균 나이
SELECT gender, AVG(YEAR(CURDATE()) - YEAR(birth)) AS avg_age 
FROM students 
GROUP BY gender;

-- 특정 생일 범위 내의 학생 수 세기
SELECT 
    CASE 
        WHEN birth >= '1990-01-01' AND birth < '2000-01-01' THEN '1990s'
        WHEN birth >= '2000-01-01' AND birth < '2010-01-01' THEN '2000s'
    END AS birth_decade,
    COUNT(*) AS count
FROM students
GROUP BY birth_decade;

-- 중복된 학생 이름 조회
SELECT student_name, COUNT(*) AS count FROM students GROUP BY student_name HAVING COUNT(*) > 1;

-- 각 학생의 나이를 계산하여 조회 (기준 날짜는 현재 날짜)
SELECT student_name, birth, 
    YEAR(CURDATE()) - YEAR(birth) AS age
FROM students;

-- 현재 날짜 기준으로 나이 계산(만 나이)
SELECT student_name, birth, 
    YEAR(CURDATE()) - YEAR(birth) - (DATE_FORMAT(CURDATE(), '%m%d') < DATE_FORMAT(birth, '%m%d')) AS age
FROM students;

-- 업데이트
SET SQL_SAFE_UPDATES = 0; -- 안전 업데이트 모드 끄기(실습을 위해)
-- UPDATE/DELETE 시 기본키를 사용하지 않으면 동작 불가(안전 업데이트 모드 기본 활성화)

-- 홍길동의 자기소개 업데이트
UPDATE students
SET intro = '안녕하세요, 홍길동입니다. 모험과 도전을 좋아합니다.'
WHERE student_name = '홍길동';

-- 모든 남학생의 자기소개 업데이트
UPDATE students
SET intro = '저는 남학생입니다.'
WHERE gender = '남';

-- 모든 학생의 나이를 1살 증가시키기
UPDATE students
SET birth = DATE_SUB(birth, INTERVAL 1 YEAR);

-- 자기소개가 없는 학생의 자기소개를 NULL로 설정
UPDATE students
SET intro = NULL
WHERE intro = '';

-- 생일이 2000년 이후인 여학생의 자기소개 업데이트
UPDATE students
SET intro = '저는 2000년 이후에 태어난 여학생입니다.'
WHERE gender = '여' AND birth >= '2000-01-01';

-- 성별에 따라 자기소개를 다르게 업데이트
UPDATE students
SET intro = CASE
    WHEN gender = '남' THEN '저는 남학생입니다.'
    WHEN gender = '여' THEN '저는 여학생입니다.'
    ELSE '성별이 명시되지 않았습니다.'
END;

-- 특정 학생의 이름과 생일 업데이트
UPDATE students
SET student_name = '홍길순', birth = '2000-05-15'
WHERE student_name = '홍길동';

-- 모든 학생의 자기소개에 현재 날짜 추가
UPDATE students
SET intro = CONCAT(intro, ' (업데이트 날짜: ', CURDATE(), ')');

SELECT * FROM students;

-- 삭제
SET SQL_SAFE_UPDATES = 0; -- 안전 업데이트 모드 끄기(실습을 위해)
-- UPDATE/DELETE 시 기본키를 사용하지 않으면 동작 불가(안전 업데이트 모드 기본 활성화)

-- 홍길동 학생 삭제
DELETE FROM students
WHERE student_name = '홍길동';

-- 특정 조건을 만족하는 여러 행 삭제 - 모든 남학생 삭제
DELETE FROM students
WHERE gender = '남';

-- 특정 생일 이전에 태어난 학생 삭제 - 2000년 이전에 태어난 학생 삭제
DELETE FROM students
WHERE birth < '2000-01-01';

-- 특정 조건을 만족하는 행 삭제 - 자기소개가 NULL인 학생 삭제
DELETE FROM students
WHERE intro IS NULL;

-- 특정 조건을 만족하는 행 삭제 (여러 조건) - 성별이 '여'이고 2000년 이전에 태어난 학생 삭제
DELETE FROM students
WHERE gender = '여' AND birth < '2000-01-01';

-- 모든 행 삭제 (테이블 초기화)
DELETE FROM students;

-- 또는
TRUNCATE TABLE students;
-- TRUNCATE TABLE 명령은 테이블의 모든 데이터를 삭제하고, 자동 증가 값을 초기화 TRUNCATE는 롤백이 불가능하지만, 더 빠름

-- 제한된 수의 행 삭제 (ORDER BY와 LIMIT 사용)
-- 예시: 나이가 가장 많은 학생 1명 삭제
DELETE FROM students
ORDER BY birth ASC
LIMIT 1;

-- 특정 패턴을 만족하는 행 삭제
-- 예시: 자기소개에 '모험'이라는 단어가 포함된 학생 삭제
DELETE FROM students
WHERE intro LIKE '%모험%';




